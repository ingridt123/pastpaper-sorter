DATABASE
///**
// * mutator method for database URL
// * @param database URL
// */
//public void setURL(String l) {
//    url = l;
//}
//
///**
// * mutator method for database username
// * @param database username
// */
//public void setUser(String u) {
//    user = u;
//}
//
///**
// * mutator method for database password
// * @param database password
// */
//public void setPassword(String p) {
//    password = p;
//}


IMPORTFILE
for (Map.Entry<Integer, ArrayList<String>> t : text.entrySet()) {
//
//// create ArrayList for values
//ObservableList<String> v = FXCollections.observableArrayList();
//v.add(Integer.toString(t.getKey()));        // questionID
//v.add(year + month + num + level);          // paperID
////v.add(t.getValue().get(0));
////v.add(t.getValue().get(1));
////v.add(t.getValue().get(2));
//
//// insert into database
//db.insert(tableName, v);
//}


//text = new LinkedHashMap<>();

//if (m == 5) {
//  month = "05";
//}
//else if (m == 11) {
//  month = "11";
//}
//if (l.equals("SL")) {
//  level = "1";
//}
//else if (l.equals("HL")) {
//  level = "2";
//}

//private long jobID;                         	// unique identifier of conversion job
//private long fileID;                        	// unique identifier of target file (-1 if job is incomplete)


//for (Paper p : papers) {
//if (Integer.toString(p.getYear()).equals(year) 
//		&& p.getMonth().equals(month) 
//		&& Integer.toString(p.getNum()).equals(num) 
//		&& p.getLevel().equals(level)) {
//	break;
//}

//question marks
//endIndex = t.lastIndexOf("\\[\\d\\]");
//p = Pattern.compile(".*\\d.*");
//m = p.matcher(t.substring(endIndex));
//m.find();
//int marks = Integer.parseInt(m.group());

//loop through question keywords
//for (Map.Entry<String, Integer> qKey : keywords.entrySet()) {
//
//	if (tKey.getKey().equals(qKey.getKey())) {
//		prob += qKey.getValue() + tKey.getValue();
//		break;
//	}
//	
//}


//// get mark scheme notes
//String notes = "";
//if (t.contains("Note:")) {
//	startIndex = t.indexOf("Note:");
//	notes = t.substring(startIndex).trim();
//	t = t.substring(0,startIndex).trim();
//}


PAPER
//    /**
//     * accessor method for full paper name
//     * @return paper name
//     */
//    public String getFullName() {
//        return month + year + "/P" + num + "/" + level + "L";
//    }


FILEUTIL
byte[] inputBytes = read(new File(name + ".pdf"));

/**
	 * read file (from http://pdfextractoronline.com/tabex-pdf-api/)
	 * @param file
	 * @return
	 * @throws IOException
	 */
	public static byte[] read(File file) throws IOException {

        ByteArrayOutputStream ous = null;
        InputStream ios = null;
        try {
            byte[] buffer = new byte[4096];
            ous = new ByteArrayOutputStream();
            ios = new FileInputStream(file);
            int read = 0;
            while ((read = ios.read(buffer)) != -1) {
                ous.write(buffer, 0, read);
            }
        } finally {
            try {
                if (ous != null) {
                    ous.close();
                }
            } catch (IOException e) {
            }

            try {
                if (ios != null) {
                    ios.close();
                }
            } catch (IOException e) {
            }
        }
        return ous.toByteArray();
    }


SEARCH UTIL
//case "year":
//	String[] values = value.split(" ");
//	int year = Integer.parseInt(values[0]);
//	String month = values[1]; 
//	for (Paper p : papers) {
//		if (p.getYear() == year && p.getMonth().equals(value)) {
//			return p;
//		}
//	}
//	break;
//	
//case "num":
//	int num = Integer.parseInt(value);
//	for (Paper p : papers) {
//		if (p.getNum() == num) {
//			return p;
//		}
//	}
//	break;
//	
//case "level":
//	for (Paper p : papers) {
//		if (p.getLevel().equals(value)) {
//			return p;
//		}
//	}
//	break;
//
//}


STRINGUTIL
//for (String w : words) {
//str = str + w + ", ";
//}
//str = str.substring(0,str.length()-2) + ")";
//
//return str;
